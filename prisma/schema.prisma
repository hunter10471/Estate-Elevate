generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") 
  directUrl = env("POSTGRES_URL_NON_POOLING") 
}

model User {
  id String @id @default(cuid())
  name String
  email String @unique
  emailVerified DateTime?
  image String?
  accounts Account[]
  sessions Session[]
  likedProperties LikedProperty[]
  password String?
  phone String?
  bio String?
  city String?
  state String?
  country String?
  userType UserType @default(USER)
  lastLogin DateTime?
  isActive Boolean @default(true)
  listings Property[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
model Property {
  id String @id @default(cuid())
  title String
  description String
  price Float
  type PropertyType
  status ListingStatus
  address String?
  city String
  state String
  country String
  latlng Int[]
  bedrooms Int
  bathrooms Int
  area Float
  yearBuilt Int?
  images String[]
  facilities String[]
  negotiable Boolean
  listedBy User @relation(fields: [listedById],references: [id])
  likedBy LikedProperty[] 
  listedById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model LikedProperty {
  userId     String
  propertyId String
  createdAt  DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  @@id([userId, propertyId])
}



// ENUMS

enum PropertyType {
    HOUSE
    APARTMENT
    VILLA
    GUEST_HOUSE
}

enum ListingStatus {
    SALE
    RENT
}

enum UserType {
  ADMIN
  USER
}